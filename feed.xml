<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-01-14T23:19:45+08:00</updated><id>/</id><title type="html">Gensokyo</title><subtitle>Welcome to Gensokyo</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2017/12/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-12-10T16:55:43+08:00</published><updated>2017-12-10T16:55:43+08:00</updated><id>/jekyll/update/2017/12/10/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2017/12/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Y组合子</title><link href="/y-combinator" rel="alternate" type="text/html" title="Y组合子" /><published>2016-12-26T02:08:21+08:00</published><updated>2016-12-26T02:08:21+08:00</updated><id>/ycombinator</id><content type="html" xml:base="/y-combinator">&lt;p&gt;Y组合子要解决的问题是如何用纯正的lambda表达式实现递归
以阶乘为例，可以采用下面的代码以递归的形式表达：&lt;/p&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;要求一个自然数n的阶乘只要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;f n&lt;/code&gt;即可
上述代码包含了一个赋值语句，而纯正的lambda表达式是没有赋值语句的，那么用纯正的lambda表达式能否实现递归呢？&lt;/p&gt;

&lt;p&gt;可以猜测能求阶乘的函数有很多个,比如&lt;code class=&quot;highlighter-rouge&quot;&gt;f n = foldl (*) [1..n]&lt;/code&gt;就是其中之一.于是我们将能求阶乘的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;当成一个变量,这样定义阶乘就变成了求&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;的值&lt;/p&gt;

&lt;p&gt;定义&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Haskell&quot;&gt;g f = \n -&amp;gt; if n &amp;gt; 1 then n * f (n-1) else 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先给出结论: f能求阶乘的充分必要条件是&lt;code class=&quot;highlighter-rouge&quot;&gt;g f == f&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;表示等效,下同)&lt;/p&gt;

&lt;p&gt;下面不严谨地证明一下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;必要性
假设&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;能计算阶乘,那么将&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;应用于&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;可得一个新的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;g f&lt;/code&gt;, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;\n -&amp;gt; if n &amp;gt; 1 then n * f (n-1) else 1&lt;/code&gt;, ,&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;能计算阶乘,由阶乘的定义, &lt;code class=&quot;highlighter-rouge&quot;&gt;g f&lt;/code&gt;必然也能计算阶乘,也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;g f == f&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;充分性
如果&lt;code class=&quot;highlighter-rouge&quot;&gt;g f == f&lt;/code&gt;, 那么通过代换可以得到&lt;code class=&quot;highlighter-rouge&quot;&gt;f == \n -&amp;gt; if n &amp;gt; 1 then n * f (n-1) else 1&lt;/code&gt;,这就是我们在上面给出的阶乘的递归定义形式,可以确定这样的f是能计算出阶乘的,通过数学归纳法可以证明&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上, 可以知道&lt;code class=&quot;highlighter-rouge&quot;&gt;g f == f&lt;/code&gt;是f能计算阶乘的充分必要条件&lt;/p&gt;

&lt;p&gt;那么问题就变成了”求方程&lt;code class=&quot;highlighter-rouge&quot;&gt;g f == f&lt;/code&gt;的解”&lt;/p&gt;

&lt;p&gt;很显然f应该是一个关于g的函数,那么Y组合子其实就是这个函数: &lt;code class=&quot;highlighter-rouge&quot;&gt;f == Y g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是具体怎么求这个解就太难了,作为民科的我只能利用前辈们留下的结论自己慢慢凑&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;应该是&lt;code class=&quot;highlighter-rouge&quot;&gt;gen gen&lt;/code&gt;这样的形式,&lt;code class=&quot;highlighter-rouge&quot;&gt;gen&lt;/code&gt;满足&lt;/p&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;于是&lt;code class=&quot;highlighter-rouge&quot;&gt;gen gen = g gen gen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样就找到了g的不动点&lt;/p&gt;

&lt;p&gt;现在我们开始构造Y组合子：
由上面的讨论可以知道&lt;code class=&quot;highlighter-rouge&quot;&gt;Y g == f == gen gen == g gen gen&lt;/code&gt;
则&lt;/p&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;由此便得到了Y组合子
然而以上得出的Y组合子由于x的类型是infinite type,导致无法被haskell接受:(&lt;/p&gt;</content><author><name></name></author><summary type="html">Y组合子要解决的问题是如何用纯正的lambda表达式实现递归 以阶乘为例，可以采用下面的代码以递归的形式表达： f n = if n &amp;gt; 1 then n * f (n-1) else 1 要求一个自然数n的阶乘只要调用f n即可 上述代码包含了一个赋值语句，而纯正的lambda表达式是没有赋值语句的，那么用纯正的lambda表达式能否实现递归呢？</summary></entry></feed>